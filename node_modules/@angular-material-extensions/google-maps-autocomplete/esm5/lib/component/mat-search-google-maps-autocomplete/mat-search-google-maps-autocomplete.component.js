/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { parseGermanAddress } from '../../helpers/parser';
import { Appearance } from '../mat-google-maps-autocomplete.component';
import { InputAnimations } from '../../animations';
var MatSearchGoogleMapsAutocompleteComponent = /** @class */ (function () {
    function MatSearchGoogleMapsAutocompleteComponent(formBuilder) {
        this.formBuilder = formBuilder;
        this.appearance = Appearance.STANDARD;
        this.searchAddressLabel = 'Search Address';
        this.streetNameLabel = 'Street';
        this.streetNumberLabel = 'Nr.';
        this.postalCodeLabel = 'PLZ';
        this.localityLabel = 'Locality';
        this.vicinityLabel = 'Vicinity';
        this.onGermanAddressMapped = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MatSearchGoogleMapsAutocompleteComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.addressFormGroup = this.createAddressFormGroup();
    };
    /**
     * @return {?}
     */
    MatSearchGoogleMapsAutocompleteComponent.prototype.createAddressFormGroup = /**
     * @return {?}
     */
    function () {
        return this.formBuilder.group({
            streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],
            streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],
            postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],
            vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],
            locality: this.formBuilder.group({
                long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],
            }),
        });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    MatSearchGoogleMapsAutocompleteComponent.prototype.syncAutoComplete = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.germanAddress) {
            this.addressFormGroup.reset();
        }
        /** @type {?} */
        var germanAddress = parseGermanAddress($event);
        this.germanAddress = germanAddress;
        if (germanAddress.vicinity) {
            this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity);
        }
        if (germanAddress.streetName) {
            this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName);
        }
        if (germanAddress.streetNumber) {
            this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber);
        }
        if (germanAddress.postalCode) {
            this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode);
        }
        if (germanAddress.locality && germanAddress.locality.long) {
            this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long);
        }
        this.onGermanAddressMapped.emit(germanAddress);
    };
    MatSearchGoogleMapsAutocompleteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-search-google-maps-autocomplete',
                    template: "<div fxLayout=\"column\">\n  <div *ngIf=\"!disableSearch\" fxFlex=\"100\">\n    <!--search address-->\n    <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n      <mat-label>{{searchAddressLabel}}</mat-label>\n      <input\n        (onAutocompleteSelected)=\"syncAutoComplete($event)\"\n        [country]=\"country\"\n        [placeIdOnly]=\"placeIdOnly\"\n        [strictBounds]=\"strictBounds\"\n        [types]=\"types\"\n        [type]=\"type\"\n        matGoogleMapsAutocomplete\n        matInput\n        required\n      />\n      <mat-icon color=\"primary\" matSuffix>search</mat-icon>\n      <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n    </mat-form-field>\n  </div>\n\n  <form [formGroup]=\"addressFormGroup\" fxFlex fxLayoutGap=\"10px\">\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"80\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNameLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetName\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNumberLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetNumber\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{postalCodeLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"postalCode\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field *ngIf=\"showVicinity\" fxFlex=\"auto\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{vicinityLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          matInput\n          formControlName=\"vicinity\"\n        />\n      </mat-form-field>\n      <div formGroupName=\"locality\" fxFlex=\"auto\">\n        <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n          <mat-label>{{localityLabel}}</mat-label>\n          <input\n            [readonly]=\"readonly\"\n            formControlName=\"long\"\n            matInput\n            required\n          />\n          <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>\n          <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n        </mat-form-field>\n      </div>\n    </div>\n  </form>\n</div>\n",
                    animations: InputAnimations,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MatSearchGoogleMapsAutocompleteComponent.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    MatSearchGoogleMapsAutocompleteComponent.propDecorators = {
        appearance: [{ type: Input }],
        searchAddressLabel: [{ type: Input }],
        streetNameLabel: [{ type: Input }],
        streetNumberLabel: [{ type: Input }],
        postalCodeLabel: [{ type: Input }],
        localityLabel: [{ type: Input }],
        vicinityLabel: [{ type: Input }],
        showVicinity: [{ type: Input }],
        country: [{ type: Input }],
        placeIdOnly: [{ type: Input }],
        strictBounds: [{ type: Input }],
        types: [{ type: Input }],
        type: [{ type: Input }],
        readonly: [{ type: Input }],
        disableSearch: [{ type: Input }],
        value: [{ type: Input }],
        onGermanAddressMapped: [{ type: Output }]
    };
    return MatSearchGoogleMapsAutocompleteComponent;
}());
export { MatSearchGoogleMapsAutocompleteComponent };
if (false) {
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.appearance;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.searchAddressLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.streetNameLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.streetNumberLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.postalCodeLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.localityLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.vicinityLabel;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.showVicinity;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.country;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.placeIdOnly;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.strictBounds;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.types;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.type;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.readonly;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.disableSearch;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.value;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.onGermanAddressMapped;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.germanAddress;
    /** @type {?} */
    MatSearchGoogleMapsAutocompleteComponent.prototype.addressFormGroup;
    /**
     * @type {?}
     * @private
     */
    MatSearchGoogleMapsAutocompleteComponent.prototype.formBuilder;
}
//# sourceMappingURL=data:application/json;base64,